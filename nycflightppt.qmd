---
title: "New York Flight Data Analysis"
title-slide-attributes:
    data-background-image: ./static/images/airport.gif
    data-background-size: cover
    data-background-opacity: "0.8"
subtitle: "sub title"
author: "TEAM EE"
format: 
    revealjs:
        logo: ./static/images/lsstats-removebg.png
        theme: default
        reference-location: document
        footer: "LS Big Data School EE"
        css: ./static/css/statple.css

--- 


# about TEAM

박수현 이주형 오윤지 조익현

# NYC flights data 를 알아보자!



## nycflights13 - flights, planes {.scrollable}

`info()`
```{python}
import numpy as np
import pandas as pd 
from nycflights13 import flights, planes, weather
import matplotlib.pyplot as plt
```

::: {.panel-tabset}

#### flights

```{python}
# flights.info()
```

|    | Column          | Non-Null Count | Dtype   |
|----|---------------|----------------|--------|
|  0 | year            | 336776 non-null | int64   |
|  1 | month           | 336776 non-null | int64   |
|  2 | day             | 336776 non-null | int64   |
|  3 | dep_time        | 328521 non-null | float64 |
|  4 | sched_dep_time  | 336776 non-null | int64   |
|  5 | dep_delay       | 328521 non-null | float64 |
|  6 | arr_time        | 328063 non-null | float64 |
|  7 | sched_arr_time  | 336776 non-null | int64   |
|  8 | arr_delay       | 327346 non-null | float64 |
|  9 | carrier         | 336776 non-null | object  |
| 10 | flight          | 336776 non-null | int64   |
| 11 | tailnum         | 334264 non-null | object  |
| 12 | origin          | 336776 non-null | object  |
| 13 | dest            | 336776 non-null | object  |
| 14 | air_time        | 327346 non-null | float64 |
| 15 | distance        | 336776 non-null | int64   |
| 16 | hour            | 336776 non-null | int64   |
| 17 | minute          | 336776 non-null | int64   |
| 18 | time_hour       | 336776 non-null | object  |

#### planes
```{python}
# planes.info()
```

|    | Column        | Non-Null Count | Dtype   |
|----|--------------|----------------|--------|
|  0 | tailnum       | 3322 non-null  | object  |
|  1 | year          | 3252 non-null  | float64 |
|  2 | type          | 3322 non-null  | object  |
|  3 | manufacturer  | 3322 non-null  | object  |
|  4 | model         | 3322 non-null  | object  |
|  5 | engines       | 3322 non-null  | int64   |
|  6 | seats         | 3322 non-null  | int64   |
|  7 | speed         | 23 non-null    | float64 |
|  8 | engine        | 3322 non-null  | object  |


#### weather
```{python}
# weather.info()
```
|    | Column      | Non-Null Count | Dtype   |
|----|------------|----------------|--------|
|  0 | origin      | 26115 non-null  | object  |
|  1 | year        | 26115 non-null  | int64   |
|  2 | month       | 26115 non-null  | int64   |
|  3 | day         | 26115 non-null  | int64   |
|  4 | hour        | 26115 non-null  | int64   |
|  5 | temp        | 26114 non-null  | float64 |
|  6 | dewp        | 26114 non-null  | float64 |
|  7 | humid       | 26114 non-null  | float64 |
|  8 | wind_dir    | 25655 non-null  | float64 |
|  9 | wind_speed  | 26111 non-null  | float64 |
| 10 | wind_gust   | 5337 non-null   | float64 |
| 11 | precip      | 26115 non-null  | float64 |
| 12 | pressure    | 23386 non-null  | float64 |
| 13 | visib       | 26115 non-null  | float64 |
| 14 | time_hour   | 26115 non-null  | object  |


:::








## 우리의 주제
#### flights(airtime) 칼럼과 planes(seats) 칼럼은 무슨 관계일까?
#### delay(arr_delay, dep_delay)는 어떨 때 많이 생길까?
##### delay가 특별히 긴 model이 존재할까?
##### 비행기 제조년도 별 지연시간 확인.
##### month 와 delay 확인.



## 데이터 확인 {.scrollable}
### 지연시간에 이상치가 있다!
:::: {.columns}

::: {.column width="50%"}
```{python}
## 'dep_delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(flights['dep_delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("dep_delay")
plt.ylabel("Frequency")
plt.show()


## 'arr_delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(flights['arr_delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("arr_delay")
plt.ylabel("Frequency")
plt.show()

```

:::

::: {.column width="50%"}
```{python}
# flights['dep_delay'].describe()
```


| Statistic | Value        |
|-----------|--------------|
| count     | 328,521.000  |
| mean      | 12.639       |
| std       | 40.210       |
| min       | -43.000      |
| 25%       | -5.000       |
| 50%       | -2.000       |
| 75%       | 11.000       |
| max       | 1301.000     |
| Name: dep_delay |


```{python}
# flights['arr_delay'].describe()
```


| Statistic | Value         |
|-----------|-------------- |
| count     | 327346.000000 |
| mean      | 6.895377      |
| std       | 44.633292     |
| min       | -86.000000    |
| 25%       | -17.000000    |
| 50%       | -5.000000     |
| 75%       | 14.000000     |
| max       | 1272.000000   |
| Name: arr_delay |


:::

::::


## 데이터 확인 {.scrollable}
### weahter(wind_speed) 풍속에 이상치가 있다!
:::: {.columns}

::: {.column width="50%"}
```{python}
## 'wind_speed' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(weather['wind_speed'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("wind_speed")
plt.ylabel("Frequency")
plt.show()


```

:::

::: {.column width="50%"}
```{python}
# weather['wind_speed'].describe()
```


| Statistic | Value         |
|-----------|--------------|
| count     | 26111.000000 |
| mean      | 10.517488    |
| std       | 8.539253     |
| min       | 0.000000     |
| 25%       | 6.904680     |
| 50%       | 10.357020    |
| 75%       | 13.809360    |
| max       | 1048.360580  |
| Name: wind_speed |



:::

::::



## 전처리

flight(arr_delay), flight(dep_delay), weather(wind_speed) 전처리


```{python}
# 최종 전처리 시작.

flights_df = flights.copy()
planes_df = planes.copy()

# 전처리 함수 
def PreProcessing(df, columns):
    """
    여러 개의 컬럼에 대해 IQR 방식을 사용하여 이상치를 제거하는 함수
    
    Parameters:
    df (pd.DataFrame): 데이터프레임
    columns (list): 이상치를 제거할 컬럼 리스트
    
    Returns:
    pd.DataFrame: 이상치가 제거된 데이터프레임
    """
    f_df = df.copy()  # 원본 데이터프레임 유지
    
    for column in columns:
        desc = f_df[column].describe()
        q1 = desc['25%']
        q3 = desc['75%']
        iqr = q3 - q1
        lower_boundary = q1 - (iqr * 1.5)
        upper_boundary = q3 + (iqr * 1.5)
        
        # 이상치 제거 적용
        f_df = f_df[(f_df[column] >= lower_boundary) & (f_df[column] <= upper_boundary)]
    
    return f_df



# 필요 없는 칼럼 제거
flights_df = flights_df.drop(columns=['year'])
planes_df = planes_df.drop(columns=['speed'])

# 결측치 처리
flights_df.isna().sum()
planes_df.isna().sum() 

flights_df = flights_df.dropna(subset=['dep_time', 'dep_delay','arr_time','arr_delay','tailnum','air_time'])
planes_df = planes_df.dropna()


# merge: planes_df와 flights_df를 tailnum으로 left join
merged_df = pd.merge(planes_df, flights_df, on='tailnum', how='left')


# 지연시간에 대해 전처리 함수 적용
merged_df_f = PreProcessing(merged_df, ['arr_delay', 'dep_delay'])


# 파생 변수 생성

## delay 합.
merged_df_f['delay'] = merged_df_f['arr_delay'] + merged_df_f['dep_delay']

```

## 전처리 후 지연시간(delay) 히스토그램 {.scrollable}

```{python}
## 'dep_delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(merged_df_f['dep_delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("dep_delay")
plt.ylabel("Frequency")
plt.show()


## 'arr_delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(merged_df_f['arr_delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("arr_delay")
plt.ylabel("Frequency")
plt.show()

## 'delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(merged_df_f['delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("delay")
plt.ylabel("Frequency")
plt.show()


```

## 전처리 후 weather(wind_speed) 풍속 히스토그램 {.scrollable}

```{python}
weather_df = weather.copy()
weather_df = PreProcessing(weather_df, ['wind_speed'])

plt.figure(figsize=(6,4))       
plt.hist(weather_df['wind_speed'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("wind_speed")
plt.ylabel("Frequency")
plt.show()

```

## month, day, hour 변수와 delay 간 시각화 {.scrollable}

```{python}
import seaborn as sns

# (df, 그룹화할 칼럼 리스트, 타겟 칼럼 문자열)
def visualization_df(df, group_cols, target):
    for col in group_cols:
        # grouped_df = df.groupby(cat_col)['delay'].mean()  # 그룹별 평균 계산

        # 시각화
        plt.figure(figsize=(9, 5))
        
        sns.barplot(x=col, y=target, data=df, estimator=np.mean,
                     palette="viridis", edgecolor="black")
        plt.xlabel(col)
        plt.ylabel(f"Average ")
        plt.title(f"Average by {col}")
        plt.xticks(rotation=90)
        plt.grid(axis="y", linestyle="--", alpha=0.7)
        plt.show()
```

```{python}
#| echo: false

# 월, 일, 시간 변수 와 delay Visualization
time_cols = ['month', 'day', 'hour']

visualization_df(merged_df_f, time_cols, 'delay' )
```


```{python}
#| echo: false

# 숫자 아닌 다른 칼럼과 delay Visualization
# 숫자가 아닌 칼럼(범주형)
# categorical_cols = merged_df_f.select_dtypes(exclude='number').columns 
# categorical_cols = categorical_cols.delete([0,-1])

# visualization_df(merged_df_f, categorical_cols, 'delay' )
```




## 전체 히트맵

```{python}
import seaborn as sns
corr_mat = merged_df.select_dtypes('number').corr()
plt.figure(figsize=(10,10))
sns.heatmap(corr_mat, annot=True,
            cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Heatmap of Feature Correlations")
plt.show()
```


# flights(airtime) 칼럼과 planes(seats) 칼럼은 무슨 관계일까?

## 비행시간과 좌석수 상관계수의 관계

### flights(air_time)-planes(seats)
- +0.54의 상관계수를 갖는다. => 비교적 강한 상관계수를 가진다.
- **seat(좌석수)**가 많은수록 **비행시간**이 길다.
- 큰 비행기 일 수록 비행 시간이 길다.

### flights(air_time)-flights(distance)
- +0.52의 상관계수를 갖는다. => 비교적 강한 상관계수를 가진다.
- **seat(좌석수)**가 많을수록 **목적지**까지의 거리가 길다.
- 큰 비행기일수록 목적지까지의 거리가 길다.



## air_time-seats의 관계 {.scrollable}
비행시간(air_time)과 좌석 수(seats)의 관계 시각화 코드

```{python}

# 모델 그룹화 기준
grouped = {'717': [], '737': [], '757': [], '767': [], '777': [], '787': [],
           'A319': [], 'A320': [], 'A321': [], 'A330': [], 'A340': [],
           'EMB': [], 'ERJ': [], 'CL': [], 'MD': [], 'DC': [], 'PA': [], 'FALCON': [], 'etc': []}

# 항공기 모델별 그룹 할당
group_mapping = {}

# flights['model']을 기준으로 그룹화
for model in merged_df_f['model']:
    assigned_group = "etc"  # 기본 그룹 설정
    for group in grouped:
        if model.startswith(group):  # 특정 그룹으로 분류
            assigned_group = group
            break
    group_mapping[model] = assigned_group

# 데이터프레임 생성
model_df = pd.DataFrame({'Model': merged_df_f['model'], 'Group': merged_df_f['model'].map(group_mapping)})

#전처리한 데이터셋에 모델 그룹화한 칼럼 추가하기
merged_df_f['group']=model_df['Group']

#모델별 count 
merged_df_f['group'].value_counts()

```

```{python}
plt.figure(figsize=(10, 10))
sns.scatterplot(
    x=merged_df["air_time"],
    y=merged_df["seats"],
    hue=merged_df["model"],
    sizes=(30, 200),
    palette="Set2",
    alpha=0.5,
    data=merged_df,
)

sns.regplot(
    x=merged_df_f["air_time"],
    y=merged_df_f["seats"],
    scatter=False,
    color="red",
)

plt.xlabel("air_time")
plt.ylabel("seats")
plt.title("Scatter Plot")
plt.show()
```

- seats 변수는 대부분 100~200 사이에 집중
- 대부분의 항공기가 중형 크기로 설계되었음
- 좌석 수가 많을수록 비행 시간이 길어지는 경향이 관찰됨
- 속도가 높은 항공기는 비행 시간이 짧거나 특정 좌석 수에 집중되어 있음
- seats와 air_time: 상관계수 +0.52로, 좌석 수가 많을수록 비행 시간이 길어지는 경향이 있습니다.


## flights(distance)-flights(seats)의 관계
비행거리와 좌석 수의 관계 시각화 코드
```{python}
import seaborn as sns

plt.figure(figsize=(10, 10))
sns.scatterplot(
    x=merged_df["distance"],
    y=merged_df["seats"],
    sizes=(30, 200),
    palette="Set2",
    alpha=0.5,
    data=merged_df,
)

# Regression line (correlation line)
sns.regplot(
    x=merged_df["air_time"],
    y=merged_df["seats"],
    scatter=False,
    color="orange",
)

plt.xlabel("air_time")
plt.ylabel("seats")
plt.title("Scatter Plot")
plt.show()
```


## 둘 사이의 관계
- 비행기의 구조적인 측면
멀리 가려면 연료가 많이 필요하다. 연료통이 큰 비행기가 필요하다. 큰 비행기는 좌석수가 많다.

- 규모의 경제 측면
같은 돈을 내더라도 사람 수가 많으면 멀리갈 수 있다. 



# 지연시간(delay)과 관계가 있는 칼럼은 무엇인가?


## Model vs Delay 

```{python}

model_delay=merged_df_f.groupby('group')['delay'].mean().sort_values()

#시각화
plt.figure(figsize=(12, 6))
sns.barplot(x=model_delay.index,y=model_delay.values,palette="viridis",ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Model')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Model')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

```


# 지연시간에 날씨도 당연히 영향을 미치지 않을까?

## 우선 화씨를 섭씨로 변환해봅시다!

### 화씨를 섭씨로 변환
```{python}
#| echo: True

from nycflights13 import flights,planes,weather,airports,airlines

# 화씨를 섭씨로 변환하는 함수
def F_to_C(f):
    return (f - 32) * 5 / 9

# 변환 적용
weather["temp_c"] = weather["temp"].apply(F_to_C)
weather["dewp_c"] = weather["dewp"].apply(F_to_C)

```




---



## Temperature(기온)


::::: {.columns}

::: {.column width="40%"}

```{python}
# | echo : True

# 화씨 섭씨로 변환 후,
# 구간 나누기

def categorize_temp(t):
    t_c = F_to_C(t)
    if t_c <= 0: return 0
    elif t_c <= 5: return 5
    elif t_c <= 10: return 10
    elif t_c <= 15: return 15
    elif t_c <= 20: return 20
    elif t_c <= 25: return 25
    elif t_c <= 30: return 30
    else: return 40

```
:::

```{python}
weather["temp_group"] = weather["temp"].apply(categorize_temp)

weather_mg=pd.merge(merged_df_f,weather,on=['origin','hour','month','day'],how='left')

#groupby
temp_delay=weather_mg.groupby('temp_group')['delay'].mean()
```

::: {.column width="60%"}
```{python}

plt.figure(figsize=(6, 4))
sns.barplot(x=temp_delay.index,y=temp_delay.values,palette="viridis",ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Temperature(°C)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Temperature(°C)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```
:::

:::::

## Dew point(이슬점)

이슬점과 비행기 지연의 관계

![](dewp.png){height=200px}
![](plane.png){height=200px}
![](time.png){height=200px}



- 이슬점이 낮다 --> 공기가 매우 건조하다
- 이슬점이 낮다 --> 공기가 매우 건조하다



---

::::: {.columns}

::: {.column width="40%"}
```{python}
# | echo : True
# 화씨 섭씨로 변환 후,
# 구간 나누는 함수 정의

def categorize_dewp(d):
    d_c = F_to_C(d)
    if d_c <= 0: return 0
    elif d_c <= 5: return 5
    elif d_c <= 10: return 10
    elif d_c <= 15: return 15
    elif d_c <= 20: return 20
    else: return 25
```

:::

```{python}
weather["dewp_group"] = weather["dewp"].apply(categorize_dewp)

weather_mg=pd.merge(merged_df_f,weather,on=['origin','hour','month','day'],how='left')

dewp_delay=weather_mg.groupby('dewp_group')['delay'].mean()
```

::: {.column width="60%"}

```{python}
plt.figure(figsize=(6,4))
sns.barplot(x=dewp_delay.index,y=dewp_delay.values,palette="viridis",ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Dew point(°C)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Temperature(°C)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```

:::

:::::

## humid

::::: {.columns}

::: {.column width="40%"}


```{python}
# | echo : True

# 범위 나누는 함수 정의
def categorize_humid(h):
    if h <= 20: return 20
    elif h <= 40: return 40
    elif h <= 60: return 60
    elif h <= 80: return 80
    else: return 100

```

```{python}

weather["humid_group"] = weather["humid"].apply(categorize_humid)

weather_mg = pd.merge(merged_df_f, weather, on=['origin', 'hour', 'month', 'day'], how='left')

humid_delay = weather_mg.groupby('humid_group')['delay'].mean()

```

:::

::: {.column width="60%"}
```{python}

plt.figure(figsize=(6,4))
sns.barplot(x=humid_delay.index, y=humid_delay.values, palette="viridis", ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Humidity (%)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Humidity (%)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

```

:::

:::::

## wind_speed
```{python}
weather = PreProcessing(weather, ['wind_speed'])
weather['wind_speed'].describe()

def categorize_wind_speed(ws):
    if ws <= 5: return 5
    elif ws <= 10: return 10
    elif ws <= 15: return 15
    elif ws <= 20: return 20
    else: return 25

weather["wind_speed_group"] = weather["wind_speed"].apply(categorize_wind_speed)

weather_mg = pd.merge(merged_df_f, weather, on=['origin', 'hour', 'month', 'day'], how='left')

wind_speed_delay = weather_mg.groupby('wind_speed_group')['delay'].mean()

plt.figure(figsize=(12, 6))
sns.barplot(x=wind_speed_delay.index, y=wind_speed_delay.values, palette="viridis", ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Wind Speed (km/h or m/s)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Wind Speed')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

```

## precip
```{python}
weather = PreProcessing(weather,['precip'])
weather["precip"].describe()
weather["precip"].value_counts()


```

## pressure
```{python}
weather["pressure"].describe()
weather["pressure"].value_counts()

def categorize_pressure(p):
    if p <= 1000: return 1000
    elif p <= 1010: return 1010
    elif p <= 1020: return 1020
    elif p <= 1030: return 1030
    else: return 1040

weather["pressure_group"] = weather["pressure"].apply(categorize_pressure)

weather_mg = pd.merge(merged_df_f, weather, on=['origin', 'hour', 'month', 'day'], how='left')

pressure_delay = weather_mg.groupby('pressure_group')['delay'].mean()

plt.figure(figsize=(12, 6))
sns.barplot(x=pressure_delay.index, y=pressure_delay.values, palette="viridis", ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Pressure (hPa)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Pressure (hPa)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


```


## visib
```{python}

weather["visib"].describe()
weather["visib"].value_counts()

def categorize_visib(v):
    if v <= 2: return 2
    elif v <= 5: return 5
    elif v <= 8: return 8
    else: return 10

weather["visib_group"] = weather["visib"].apply(categorize_visib)

weather_mg = pd.merge(merged_df_f, weather, on=['origin', 'hour', 'month', 'day'], how='left')

visib_delay = weather_mg.groupby('visib_group')['delay'].mean()

plt.figure(figsize=(12, 6))
sns.barplot(x=visib_delay.index, y=visib_delay.values, palette="viridis", ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Visibility (km)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Visibility (km)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

```

# 최종 결론

## Conclusion

- airtime이 길어질 수록 시트 수가 많다. 즉 이동한다.

