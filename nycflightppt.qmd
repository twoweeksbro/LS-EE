---
title: "New York Flight Data Analysis"
title-slide-attributes:
    data-background-image: ./static/images/airport.gif
    data-background-size: cover
    data-background-opacity: "0.8"
author: "TEAM EE"
format: 
    revealjs:
        logo: ./static/images/lsstats-removebg.png
        theme: default
        reference-location: document
        footer: "LS Big Data School EE"
        css: ./static/css/statple.css
        background-transition: fade


--- 


# about TEAM {background-image=./static/images/airport.gif background-opacity=0.3}

<br>
<br>

 박수현 이주형 오윤지 조익현

# NYC flights data 를 알아보자! {background-image=./static/images/airport.gif background-opacity=0.3}




## nycflights13 - flights, planes, weather {.scrollable}

`info()`
```{python}
import numpy as np
import pandas as pd 
from nycflights13 import flights, planes, weather
import matplotlib.pyplot as plt
import seaborn as sns
viridis_cmap = sns.color_palette("viridis", as_cmap=True)

```

::: {.panel-tabset}

#### flights

```{python}
# flights.info()
```

|    | Column          | Non-Null Count | Dtype   |
|----|---------------|----------------|--------|
|  0 | year            | 336776 non-null | int64   |
|  1 | month           | 336776 non-null | int64   |
|  2 | day             | 336776 non-null | int64   |
|  3 | dep_time        | 328521 non-null | float64 |
|  4 | sched_dep_time  | 336776 non-null | int64   |
|  5 | dep_delay       | 328521 non-null | float64 |
|  6 | arr_time        | 328063 non-null | float64 |
|  7 | sched_arr_time  | 336776 non-null | int64   |
|  8 | arr_delay       | 327346 non-null | float64 |
|  9 | carrier         | 336776 non-null | object  |
| 10 | flight          | 336776 non-null | int64   |
| 11 | tailnum         | 334264 non-null | object  |
| 12 | origin          | 336776 non-null | object  |
| 13 | dest            | 336776 non-null | object  |
| 14 | air_time        | 327346 non-null | float64 |
| 15 | distance        | 336776 non-null | int64   |
| 16 | hour            | 336776 non-null | int64   |
| 17 | minute          | 336776 non-null | int64   |
| 18 | time_hour       | 336776 non-null | object  |

#### planes
```{python}
# planes.info()
```

|    | Column        | Non-Null Count | Dtype   |
|----|--------------|----------------|--------|
|  0 | tailnum       | 3322 non-null  | object  |
|  1 | year          | 3252 non-null  | float64 |
|  2 | type          | 3322 non-null  | object  |
|  3 | manufacturer  | 3322 non-null  | object  |
|  4 | model         | 3322 non-null  | object  |
|  5 | engines       | 3322 non-null  | int64   |
|  6 | seats         | 3322 non-null  | int64   |
|  7 | speed         | 23 non-null    | float64 |
|  8 | engine        | 3322 non-null  | object  |


#### weather
```{python}
# weather.info()
```
|    | Column      | Non-Null Count | Dtype   |
|----|------------|----------------|--------|
|  0 | origin      | 26115 non-null  | object  |
|  1 | year        | 26115 non-null  | int64   |
|  2 | month       | 26115 non-null  | int64   |
|  3 | day         | 26115 non-null  | int64   |
|  4 | hour        | 26115 non-null  | int64   |
|  5 | temp        | 26114 non-null  | float64 |
|  6 | dewp        | 26114 non-null  | float64 |
|  7 | humid       | 26114 non-null  | float64 |
|  8 | wind_dir    | 25655 non-null  | float64 |
|  9 | wind_speed  | 26111 non-null  | float64 |
| 10 | wind_gust   | 5337 non-null   | float64 |
| 11 | precip      | 26115 non-null  | float64 |
| 12 | pressure    | 23386 non-null  | float64 |
| 13 | visib       | 26115 non-null  | float64 |
| 14 | time_hour   | 26115 non-null  | object  |


:::








## Subject 
<br>

### flights(airtime)과 planes(seats)은 무슨 관계일까?

<br>

### 지연시간(arr_delay, dep_delay)과 날씨(weather) 간 상관관계 분석



## 데이터 확인 {.scrollable}
#### 지연시간에 이상치가 있다!
:::: {.columns}

::: {.column width="50%"}
```{python}
## 'dep_delay' 히스토그램
plt.figure(figsize=(6,4))
sns.histplot(flights['dep_delay'], 
             bins=20, 
             kde=True, 
             color=sns.color_palette("viridis", as_cmap=True)(0.7), 
             edgecolor='black', 
             alpha=0.7)
plt.ylim(0, 280000)
# plt.hist(flights['dep_delay'], 
#          bins=20, 
#          edgecolor='black', 
#          alpha=0.7) 

plt.xlabel("Departure Delay (dep_delay)")
plt.ylabel("Frequency")
plt.title("Histogram of Departure Delays")
plt.show()


## 'arr_delay' 히스토그램
plt.figure(figsize=(6,4))
sns.histplot(flights['arr_delay'], 
             bins=20, 
             kde=True, 
             color=sns.color_palette("viridis", as_cmap=True)(0.7), 
             edgecolor='black', 
             alpha=0.7)

   
# plt.hist(flights['arr_delay'], 
#          bins=20, 
#          edgecolor='black', 
#          alpha=0.7) 

plt.ylim(0, 250000)

plt.xlabel("Arrival Delay (arr_delay)")
plt.ylabel("Frequency")
plt.title("Histogram of Arrival Delays")
plt.show()

```

:::

::: {.column width="50%"}
```{python}
# flights['dep_delay'].describe()
```


| Statistic | Value        |
|-----------|--------------|
| count     | 328521.000  |
| mean      | 12.639       |
| std       | 40.210       |
| min       | -43.000      |
| 25%       | -5.000       |
| 50%       | -2.000       |
| 75%       | 11.000       |
| max       | 1301.000     |
| Name: dep_delay |


```{python}
# flights['arr_delay'].describe()
```


| Statistic | Value         |
|-----------|-------------- |
| count     | 327346.000000 |
| mean      | 6.895377      |
| std       | 44.633292     |
| min       | -86.000000    |
| 25%       | -17.000000    |
| 50%       | -5.000000     |
| 75%       | 14.000000     |
| max       | 1272.000000   |
| Name: arr_delay |


:::

::::


## 데이터 확인 {.scrollable}
#### weahter(wind_speed) 풍속에 이상치가 있다!
:::: {.columns}

::: {.column width="50%"}
```{python}
## 'wind_speed' 히스토그램
plt.figure(figsize=(6,4))       
# plt.hist(weather['wind_speed'], 
#          bins=20, 
#          edgecolor='black', 
#          alpha=0.7) 
sns.histplot(weather['wind_speed'], 
            bins=20, color =viridis_cmap(0.7))  # kde=True는 커널 밀도 추정 추가

plt.xlabel("wind_speed")
plt.ylabel("Frequency")
plt.show()


```

:::

::: {.column width="50%"}
```{python}
# weather['wind_speed'].describe()
```


| Statistic | Value         |
|-----------|--------------|
| count     | 26111.000000 |
| mean      | 10.517488    |
| std       | 8.539253     |
| min       | 0.000000     |
| 25%       | 6.904680     |
| 50%       | 10.357020    |
| 75%       | 13.809360    |
| max       | 1048.360580  |
| Name: wind_speed |



:::

::::

## 전처리에 사용된 함수 
:::: {.columns}

::: {.column width="60%"}
```{python}
#| echo: True
#| 
# 전처리 함수 
def PreProcessing(df, columns):

    f_df = df.copy()  # 원본 데이터프레임 유지
    
    for column in columns:
        desc = f_df[column].describe()
        q1 = desc['25%']
        q3 = desc['75%']
        iqr = q3 - q1
        lower_boundary = q1 - (iqr * 1.5)
        upper_boundary = q3 + (iqr * 1.5)
        
        # 이상치 제거 적용
        f_df = f_df[(f_df[column] >= lower_boundary) & \
         (f_df[column] <= upper_boundary)]
    
    return f_df
```

:::

::: {.column width="40%"}
<small>
여러 개의 컬럼에 대해 IQR을 활용하여 이상치를 제거하는 함수

<br>

`Parameters:`
df (pd.DataFrame): 데이터프레임
columns (list): 이상치를 제거할 컬럼 리스트

<br>

`Returns:`
f_df(pd.DataFrame): 이상치가 제거된 데이터프레임

</small>
:::

::::


## 전처리 {.scrollable}
#### 최종 전처리 시작

```{python}
#| echo: True

from nycflights13 import flights, planes, weather

flights_df = flights.copy()
planes_df = planes.copy()
weather_df = weather.copy()
```

<br>
<br>

#### 필요 없는 칼럼 제거
```{python}
#| echo: True

flights_df = flights_df.drop(columns=['year'])
planes_df = planes_df.drop(columns=['speed'])
weather_df = weather_df.drop(columns=['wind_dir','wind_gust'])
```

## 결측치 {.scrollable}
#### 결측치 확인

::: {.panel-tabset}

##### flights
```{.python}
flights_df.isna().sum()
len(flights_df)     # 327346

```
| Column           | Missing Count|
|------------------|--------------|
| dep_time         | 8255         |
| dep_delay        | 8255         |
| arr_time         | 8713         |
| arr_delay        | 9430         |
| tailnum          | 2512         |
| air_time         | 9430         |
| month            | 0            |
| day              | 0            |
| sched_dep_time   | 0            |
| sched_arr_time   | 0            |
| carrier          | 0            |
| flight           | 0            |
| origin           | 0            |
| dest             | 0            |
| distance         | 0            |
| hour             | 0            |
| minute           | 0            |
| time_hour        | 0            |





##### planes

```{.python}
planes_df.isna().sum()
len(planes_df)      # 3252

```

| Column       | Missing Count|
|--------------|--------------|
| year         | 70           |
| tailnum      | 0            |
| type         | 0            |
| manufacturer | 0            |
| model        | 0            |
| engines      | 0            |
| seats        | 0            |
| engine       | 0            |




##### weather

```{.python} 
weather_df.isna().sum()
len(weather)        # 26116
```

| Column       | Missing Count|
| -------------| -------------|
| pressure     | 2729         |
| wind_speed   | 4            |
| temp         | 1            |
| dewp         | 1            |
| humid        | 1            |
| origin       | 0            |
| year         | 0            |
| month        | 0            |
| day          | 0            |
| hour         | 0            |
| precip       | 0            |
| visib        | 0            |
| time_hour    | 0            |




:::





<br>
<br>


#### 결측치 처리
```{python}
#| echo: True

flights_df = flights_df.dropna()
planes_df = planes_df.dropna()
weather_df = weather_df.dropna()

```

<br>




## merge
#### planes_df와 flights_df를 tailnum으로 left join

```{python}
#| echo: True

merged_df = pd.merge(planes_df, flights_df, on='tailnum', how='left')

```

<br>
<br>
<br>


#### flights(arr_delay, dep_delay)과 weather(wind_speed) 에 대해 전처리 함수 적용

```{python}
#| echo: True

merged_df_f = PreProcessing(merged_df, ['arr_delay', 'dep_delay'])
weather_df_f = PreProcessing(weather_df, ['wind_speed'])
```

<small>
이상치가 있는 칼럼 flight(arr_delay), flight(dep_delay), weather(wind_speed)에 대해 전처리를 진행했습니다.
IQR을 이용하여 lower boundary를 Q1-(IQR * 1.5)로 설정하고 upper boundary를 Q3+(IQR * 1.5)로 설정했습니다.
해당 범위 안에 있는 데이터만 남기고 나머지는 제외했습니다.
</small>


## 파생 변수 생성
#### arr_delay와 dep_delay를 더해서 총 지연시간 delay 변수 생성

```{python}
#| echo: True

merged_df_f['delay'] = merged_df_f['arr_delay'] + merged_df_f['dep_delay']

```

<br>





## {.scrollable}
### 전처리 후 지연시간(delay) 히스토그램

:::: {.columns}

::: {.column width="50%"}

<small>전처리 전 출발 지연 히스토그램 </small>
```{python}
## 'dep_delay' 히스토그램
plt.figure(figsize=(5,3))       
# plt.hist(flights['dep_delay'], bins=20, edgecolor='black', alpha=0.7) 
sns.histplot(flights['dep_delay'], bins=20, color=viridis_cmap(0.3) )

plt.xlabel("dep_delay")
plt.ylabel("Frequency")
plt.show()
```

<small> 전처리 전 도착 지연 히스토그램 </small>

```{python}
## 'arr_delay' 히스토그램
plt.figure(figsize=(5,3))     
# plt.hist(flights['arr_delay'], bins=20, edgecolor='black')  
sns.histplot(flights['arr_delay'], bins=20,  color=viridis_cmap(0.5))


plt.xlabel("arr_delay")
plt.ylabel("Frequency")
plt.show()




```


:::

::: {.column width="50%"}

<small>전처리 후 출발 지연 히스토그램 </small>

```{python}
## 'dep_delay' 히스토그램
plt.figure(figsize=(5,3))       

sns.histplot(merged_df_f['dep_delay'], bins=20, kde=True, color=viridis_cmap(0.3))
plt.xlabel("dep_delay")
plt.ylabel("Frequency")
plt.show()
```

<small>전처리 후 도착 지연 히스토그램 </small>


```{python}
## 'arr_delay' 히스토그램
plt.figure(figsize=(5,3))       
sns.histplot(merged_df_f['arr_delay'], bins=20, kde=True, color=viridis_cmap(0.5))

plt.xlabel("arr_delay")
plt.ylabel("Frequency")
plt.show()



```
:::



::::


## {.scrollable}
### 전처리 후 weather(wind_speed) 풍속 히스토그램 

:::: {.columns}


::: {.column width="50%"}
<small>전처리 전 풍속 히스토그램 </small>
```{python}
weather_df = weather.copy()
weather_df_f = PreProcessing(weather_df, ['wind_speed'])

## 'wind_speed' 히스토그램
plt.figure(figsize=(6,4))       
# plt.hist(weather['wind_speed'], bins=20, edgecolor='black', alpha=0.7) 
sns.histplot(weather['wind_speed'], bins=20,  color=viridis_cmap(0.7))

plt.xlabel("wind_speed")
plt.ylabel("Frequency")
plt.show()

```

:::

::: {.column width="50%"}
<small>전처리 후 풍속 히스토그램 </small>
```{python}
## 'wind_speed' 히스토그램
plt.figure(figsize=(6,4))       
sns.histplot(weather_df_f['wind_speed'], bins=20, kde=True, color=viridis_cmap(0.7))

plt.xlabel("wind_speed")
plt.ylabel("Frequency")
plt.show()
```



:::

::::

## delay가 양수인 데이터만 남김 

- arr_delay, dep_delay 가 음수로 된 값도 있다. 
- 실제 지연 시간만 분석하기 위해 delay가 양수인 값만 취한다. 
```{python}
#| echo: True

merged_df_f = merged_df_f.loc[(merged_df_f['arr_delay']> 0) | (merged_df_f['dep_delay']> 0),:]

```


<!-- ## month, day, hour 변수와 delay 간 시각화 {.scrollable} -->

```{python}
import seaborn as sns

# (df, 그룹화할 칼럼 리스트, 타겟 칼럼 문자열)
def visualization_df(df, group_cols, target):
    for col in group_cols:
        # grouped_df = df.groupby(cat_col)['delay'].mean()  # 그룹별 평균 계산

        # 시각화
        plt.figure(figsize=(9, 5))
        
        sns.barplot(x=col, y=target, data=df, estimator=np.mean,
                     palette="viridis", edgecolor="black")
        plt.xlabel(col)
        plt.ylabel(f"Average ")
        plt.title(f"Average by {col}")
        plt.xticks(rotation=90)
        plt.grid(axis="y", linestyle="--", alpha=0.7)
        plt.show()
```

```{python}
#| echo: false

# 월, 일, 시간 변수 와 delay Visualization
time_cols = ['month', 'day', 'hour']

# visualization_df(merged_df_f, time_cols, 'delay' )
```


```{python}
#| echo: false

# 숫자 아닌 다른 칼럼과 delay Visualization
# 숫자가 아닌 칼럼(범주형)
# categorical_cols = merged_df_f.select_dtypes(exclude='number').columns 
# categorical_cols = categorical_cols.delete([0,-1])

# visualization_df(merged_df_f, categorical_cols, 'delay' )
```




## 전체 히트맵 {.scrollable}

```{python}
import seaborn as sns
corr_mat = merged_df.select_dtypes('number').drop(columns=["year","month","day","hour","minute","flight"]).corr()
plt.figure(figsize=(10,10))
sns.heatmap(corr_mat, annot=True,
            cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Heatmap of Feature Correlations")
plt.show()
```


# flights(airtime) 과 planes(seats) 간  관계성 {background-image=./static/images/airport.gif background-opacity=0.3}

## 비행시간과 좌석수의 관계 {.scrollable}

### flights(air_time) - planes(seats)

- +0.54의 상관계수를 갖는다. => 비교적 강한 상관계수를 가진다.
- **seat(좌석수)**가 많을수록 **비행시간**이 길 것이다.
- 큰 비행기 일 수록 비행 시간이 길 것이다.


### flights(air_time) - flights(distance)
- +0.52의 상관계수를 갖는다. => 비교적 강한 상관계수를 가진다.
- **air_time(비행시간)**이 길수록 **목적지**까지의 거리가 길 것이다.
- 큰 비행기일수록 목적지까지의 거리가 길 것이다.


## air_time-seats의 관계 {.scrollable}
::: {.panel-tabset}
### 시각화
비행시간(air_time)과 좌석 수(seats)간 관계 시각화

:::: {.columns}

::: {.column width="65%"}
```{python}

# 모델 그룹화 기준
grouped = {'717': [], '737': [], '757': [], '767': [], '777': [], '787': [],
           'A319': [], 'A320': [], 'A321': [], 'A330': [], 'A340': [],
           'EMB': [], 'ERJ': [], 'CL': [], 'MD': [], 'DC': [], 'PA': [], 'FALCON': [], 'etc': []}

# 항공기 모델별 그룹 할당
group_mapping = {}

# flights['model']을 기준으로 그룹화
for model in merged_df_f['model']:
    assigned_group = "etc"  # 기본 그룹 설정
    for group in grouped:
        if model.startswith(group):  # 특정 그룹으로 분류
            assigned_group = group
            break
    group_mapping[model] = assigned_group

# 데이터프레임 생성
model_df = pd.DataFrame({'Model': merged_df_f['model'], 'Group': merged_df_f['model'].map(group_mapping)})

#전처리한 데이터셋에 모델 그룹화한 칼럼 추가하기
merged_df_f['group']=model_df['Group']

#모델별 count 
merged_df_f['group'].value_counts()

model_delay=merged_df_f.groupby('group')['delay'].mean().sort_values()

#시각화
# plt.figure(figsize=(12, 6))
# sns.barplot(x=model_delay.index,y=model_delay.values,palette="viridis",ci=None)
# sns.light_palette("seagreen", as_cmap=True)
# plt.xlabel('Model')
# plt.ylabel('Average Delay (minutes)')
# plt.title('Average Delay by Model')
# plt.xticks(rotation=45)
# plt.tight_layout()
# plt.show()

```
```{python}
plt.figure(figsize=(8, 8))
sns.scatterplot(
    x=merged_df_f["air_time"],
    y=merged_df_f["seats"],
    hue=merged_df_f["group"],
    sizes=(30, 200),
    palette="Set2",
    alpha=0.5,
    data=merged_df,
)

sns.regplot(
    x=merged_df_f["air_time"],
    y=merged_df_f["seats"],
    scatter=False,
    color="red",
)

plt.xlabel("air_time")
plt.ylabel("seats")
plt.title("Scatter Plot")
plt.show()
```
:::

::: {.column width="35%"}


<small>
air_time(비행시간)과 seats(좌석 수)는 양의 상관관계임 (비행시간이 증가할 때마다 좌석 수도 증가하는 경향)
</small>
<br>
<small>
seats(좌석수) 변수는 대부분 100 ~ 200 사이에 집중
</small>
<br>
<small>
- seats(좌석수)가 많을수록 air_time(비행 시간)이 길어지는 경향
</small>
<br>
<small>
즉, 좌석 수가 많을수록 비행 시간이 길어지는 경향이 있음
</small>
:::

::::

### 모델 그룹화
```{.python}
# 모델 그룹화 기준
grouped = {'717': [], '737': [], '757': [], '767': [], '777': [], '787': [],
           'A319': [], 'A320': [], 'A321': [], 'A330': [], 'A340': [],
           'EMB': [], 'ERJ': [], 'CL': [], 'MD': [], 'DC': [], 'PA': [], 'FALCON': [], 'etc': []}

group_mapping = {}

# flights['model']을 기준으로 그룹화
for model in merged_df_f['model']:
    assigned_group = "etc"  # 기본 그룹 설정
    for group in grouped:
        if model.startswith(group):  # 특정 그룹으로 분류
            assigned_group = group
            break
    group_mapping[model] = assigned_group

```
::: 

## {.scrollable}
### 데이터를 그룹화 하여 특징 알아내기 

:::: {.columns}

비행 시간 분포를 좌석 수 범주별로 시각화
<br>

::: {.column width="70%"}
```{python}
seats_bins = [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]
seats_lebels = [
    "0-50",
    "50-100",
    "100-150",
    "150-200",
    "200-250",
    "250-300",
    "300-350",
    "350-400",
    "400-450",
    "450+",
]

merged_df_f["seats_category"] = pd.cut(
    merged_df_f["seats"], bins=seats_bins, labels=seats_lebels, right=False
)

plt.figure(figsize=(12, 8))
sns.histplot(
    data=merged_df_f,
    x="air_time",
    hue="seats_category",
    multiple="stack",
    bins=20,
    palette="hls",
    alpha=0.7,
)

plt.xlabel("Air Time (minutes)")
plt.ylabel("Frequency")
plt.title("Histogram of Air Time Grouped by Seat Categories")

plt.show()
```

:::

::: {.column width="30%"}


<small> `0~150` (소형 항공기) : 비행시간이 짧은 구간(0~150)에 주로 분포 </small>

<small> `150~250` (중형 항공기) : 비행시간이 100-150인 구간에 주로 분포 </small>

<small> `250~350` (대형 항공기) : 비행시간이 짧은 구간에서는 작은 비율을 차지하다가 긴 구간에서 차지하는 비율이 서서히 증가하는 경향
</small>
<small> `350~450+` (초대형 항공기) : 시각화 자료로 확인 불가할 정도로 적은 수 운행 </small>

<small>즉.
소형 항공기일 수록 비행 시간에 영향을 많이 받음 </small>
<small>소형 항공기의 경우 운행 시 비행 시간에 많은 영향을 받음</small>

<small> 하지만 크기가 큰 항공기일 수록 오히려 비행 시간에 영향을 받지 않고 균등하게 분포하는 경향이 있음 </small>

:::

::::


<!-- ## flights(distance)-flights(seats)의 관계 {.scrollable}

비행거리와 좌석 수의 관계 시각화 코드


```{python}
plt.figure(figsize=(10, 10))
sns.scatterplot(
    x=merged_df_f["distance"],
    y=merged_df_f["seats"],
    hue=merged_df_f["group"],
    sizes=(30, 200),
    palette="Set2",
    alpha=0.5,
    data=merged_df,
)

sns.regplot(
    x=merged_df_f["distance"],
    y=merged_df_f["seats"],
    scatter=False,
    color="red",
)

plt.xlabel("distance")
plt.ylabel("seats")
plt.title("Scatter Plot")
plt.show()
```



## {.scrollable}
### 데이터를 그룹화 하여 특징 알아내기 

:::: {.columns}

비행 거리 분포를 좌석 수 범주별로 시각화 

<br>

::: {.column width="70%"}
```{python}
plt.figure(figsize=(12, 8))
sns.histplot(
    data=merged_df_f,
    x="distance",
    hue="seats_category",
    multiple="stack",
    bins=20,
    palette="hls",
    alpha=0.7,
)

plt.xlabel("distance(miles)")
plt.ylabel("Frequency")
plt.title("Histogram of Distance Grouped by Seat Categories")

plt.show()
```

:::

::: {.column width="30%"}


<small>`0~150` (소형 항공기) : 비행거리가 짧은 구간(0~1000)에 주로 분포 </small>
<small>`150~250` (중형 항공기) : 비행거리가 1000인 시점부터 전체 빈도 중 차지하는 비율 높아지는 것 관찰 가능 </small>
<small>`250~350` (대형 항공기) : 비행거리 2500부터 운행 빈도가 증가</small>
<small>`350~450+` (초대형 항공기) : 시각화 자료로 확인 불가할 정도로 적은 수 운행 </small>

<small>
소형 항공기일 수록 비행 거리에 영향을 많이 받음 (주로 단거리 운행)</small>
<small> 소형 항공기의 경우 운행 시 비행거리에 많은 영향을 받음 </small>
<small> 하지만 크기가 큰 항공기일 수록 오히려 비행 거리에 영향을 받지 않고 균등하게 분포하는 경향이 있음 </small>

:::

:::: -->

<!-- ## 그룹화된 데이터에 대해 상관관계 시각화 {.scrollable}

::::{.columns}

:::{.column width="60%"}
```{python}
grouped_data = merged_df_f.groupby("seats_category").mean(numeric_only=True)[
    ["seats", "air_time", "distance"]
]
correlation = grouped_data.corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation, annot=True, cmap="YlGnBu", fmt=".2f")
plt.title("Correlation Matrix")
plt.show()
```
:::

:::{.column width="40%"}
1. 생성된 범주를 기준으로 그룹화된 데이터를 가지고 seats와 air_time 간의 상관관계를 계산해봄
- air_time - seats : 0.52 (기존) > 0.82 (그룹화)
- distance - seats : 0.54 (기존) > 0.83 (그룹화)
2. 그룹화된 데이터의 상관관계는 기존 데이터보다 더 높은 상관관계를 가지는 것으로 보임
:::
:::: -->


## 둘 사이의 관계 
- 비행기의 구조적인 측면

멀리 가려면 연료가 많이 필요하다. 연료통이 커야 한다. 연료통이 크려면 큰 비행기여야 한다. 큰 비행기는 좌석수가 많다.

- 규모의 경제 측면

같은 돈을 내더라도 사람 수가 많으면 멀리갈 수 있다. 많은 사람을 수용할 수 있는 비행기가 멀리갈 수 있다.



<!-- # 지연시간(delay)과 관계가 있는 칼럼은 무엇인가? -->


<!-- ## Model vs Delay  -->





# 지연시간에 날씨도 당연히 영향을 미치지 않을까? {background-image=./static/images/airport.gif background-opacity=0.3}


## 날씨 히트맵 {.scrollable}

```{python}
import seaborn as sns
corr_mat = weather_df_f.select_dtypes('number').drop(columns=["year","month","day","hour"]).corr()
plt.figure(figsize=(8,8))
sns.heatmap(corr_mat, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Heatmap of Feature Correlations")
plt.show()

```


## Temperature(기온)
::::: {.columns}
<small>**가독성을 위해 화씨(°F)를 섭씨(°C)로 변환**</small>


::: {.column width="40%"}

```{python}
# | echo : True
# 화씨(°F)를 섭씨(°C)로 
# 변환하는 함수 
def F_to_C(f):
    return (f - 32) * 5 / 9

# 기온 구간 나누는 함수 
def categorize_temp(t):
    t_c = F_to_C(t)
    if t_c <= 0: return 0
    elif t_c <= 5: return 5
    elif t_c <= 10: return 10
    elif t_c <= 15: return 15
    elif t_c <= 20: return 20
    elif t_c <= 25: return 25
    elif t_c <= 30: return 30
    else: return 40
```
:::


```{python}
weather_df_f["temp_group"] = weather_df_f["temp"].apply(categorize_temp)

weather_mg=pd.merge(merged_df_f,weather_df_f,on=['origin','hour','month','day'],how='left')

#groupby
temp_delay=weather_mg.groupby('temp_group')['delay'].mean()
```

::: {.column width="60%"}
```{python}
colors = ["yellowgreen", "yellowgreen","lightgrey","lightgrey","lightgrey","lightgrey","lightgrey","lightgrey"]  
plt.figure(figsize=(6, 4))
sns.barplot(x=temp_delay.index,y=temp_delay.values,palette=colors,ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Temperature(°C)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Temperature(°C)')
plt.xticks(rotation=45)
plt.ylim(4, 11)
plt.tight_layout()
plt.show()
```
<small> - 기온이 너무 낮으면 항공기 운항이 지연되는 경향이 있다.</small>

:::

:::::

## Dew point(이슬점)
#### 공기 중 수증기가 응결하기 시작하는 온도. 
#### 습도와 밀접한 관련이 있다. 
<br>
<이슬점과 항공기 지연>

- 이슬점이 높으면 대기가 불안정해지고, 구름이 쉽게 형성되어 항공기 운항이 지연될 가능성이 있다.<br>
→ 가시거리(visib)와도 관련이 있음!
- 이슬점이 너무 낮아도 활주로에 서리나 얼음이 생길 수 있어 제설 작업 등으로 항공기 운항이 지연될 가능성이 있다.

---
## {.scrollable}
### Dew Point(이슬점)/ Humid(습도)
### /Visible Distance(가시거리) 
:::: {.columns}

::: {.column width="40%"}
<br>
```{python}
# | echo : True
# 화씨 섭씨로 변환 후,
# 이슬점 구간 나누는 함수
def categorize_dewp(d):
    d_c = F_to_C(d)
    if d_c <= 0: return 0
    elif d_c <= 5: return 5
    elif d_c <= 10: return 10
    elif d_c <= 15: return 15
    elif d_c <= 20: return 20
    else: return 25
```

<br>
<br>
<br>
<br>

```{python}
# | echo : True
# 습도 범위 나누는 함수 정의
def categorize_humid(h):
    if h <= 20: return 20
    elif h <= 40: return 40
    elif h <= 60: return 60
    elif h <= 80: return 80
    else: return 100
```

<br>
<br>
<br>
<br>
<br>

```{python}
# | echo : True
# 가시거리 범위 나누는 함수 정의
def categorize_visib(v):
    if v <= 2: return 2
    elif v <= 5: return 5
    elif v <= 8: return 8
    else: return 10
```

:::

```{python}
#dewp
weather["dewp_group"] = weather["dewp"].apply(categorize_dewp)

weather_mg=pd.merge(merged_df_f,weather,on=['origin','hour','month','day'],how='left')

dewp_delay=weather_mg.groupby('dewp_group')['delay'].mean()
```

```{python}
#humid
weather["humid_group"] = weather["humid"].apply(categorize_humid)

weather_mg = pd.merge(merged_df_f, weather, on=['origin', 'hour', 'month', 'day'], how='left')

humid_delay = weather_mg.groupby('humid_group')['delay'].mean()

```

```{python}
#visib
weather["visib_group"] = weather["visib"].apply(categorize_visib)

weather_mg = pd.merge(merged_df_f, weather, on=['origin', 'hour', 'month', 'day'], how='left')

visib_delay = weather_mg.groupby('visib_group')['delay'].mean()
```

::: {.column width="60%"}
```{python}
#dewp
colors = ["yellowgreen", "mediumseagreen","lightgrey","lightgrey","mediumseagreen","yellowgreen"]  
plt.figure(figsize=(6,4))
sns.barplot(x=dewp_delay.index,y=dewp_delay.values,palette=colors,ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Dew point(°C)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Dew point(°C)')
plt.xticks(rotation=45)
plt.ylim(4, 11)
plt.tight_layout()
plt.show()
```
<small>- 이슬점이 너무 낮거나 높으면 항공기 운항이 지연되는 경향이 보인다.</small>

```{python}
#humid
colors = ["yellowgreen", "lightgrey","lightgrey","lightgrey","yellowgreen"]  
plt.figure(figsize=(6,4))
sns.barplot(x=humid_delay.index, y=humid_delay.values, palette=colors, ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Humidity (%)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Humidity (%)')
plt.xticks(rotation=45)
plt.ylim(4, 13)
plt.tight_layout()
plt.show()

```
<small>- 습도가 너무 높으면 항공기 운항이 지연되는 경향이 있다.</small>

```{python}
#visib
colors = ["yellowgreen", "lightgrey","lightgrey","lightgrey"]  
plt.figure(figsize=(6,4))
sns.barplot(x=visib_delay.index, y=visib_delay.values, palette=colors, ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Visibility (km)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Visibility (km)')
plt.xticks(rotation=45)
plt.ylim(2.5,18)
plt.tight_layout()
plt.show()
```
<small>- 가시거리가 짧을 수록 항공기 운항이 지연되는 경향이 있다.</small>
:::


::::


## {.scrollable}
### Wind_speed(풍속)/Precip(강수량)
### /Pressure(기압)

:::: {.columns}

::: {.column width="40%"}
<br>
```{python}
#| echo: True
# 풍속 구간 나누는 함수
def categorize_wind_speed(ws):
    if ws <= 5: return 5
    elif ws <= 10: return 10
    elif ws <= 15: return 15
    elif ws <= 20: return 20
    else: return 25
```

<br>
<br>
<br>
<br>

```{python}
# | echo : True
# 강수량 범위 나누는 함수 정의
def categorize_precip(precip):
    if precip == 0: return "sunny"
    else: return "rainy"

```

<br>
<br>
<br>
<br>
<br>
<br>
<br>

```{python}
# | echo : True
# 기압 범위 나누는 함수 정의
def categorize_pressure(p):
    if p <= 1000: return 1000
    elif p <= 1010: return 1010
    elif p <= 1020: return 1020
    elif p <= 1030: return 1030
    else: return 1040

```

:::


```{python}
#wind_speed_group
weather["wind_speed_group"] = weather["wind_speed"].apply(categorize_wind_speed)

weather_mg = pd.merge(merged_df_f, weather, on=['origin', 'hour', 'month', 'day'], how='left')

wind_speed_delay = weather_mg.groupby('wind_speed_group')['delay'].mean()

```


```{python}
#precip
weather_mg["precip_group"] = weather_mg["precip"].apply(categorize_precip)

precip_delay = weather_mg.groupby('precip_group')['delay'].mean()

```

```{python}
#pressure
weather["pressure_group"] = weather["pressure"].apply(categorize_pressure)

weather_mg = pd.merge(merged_df_f, weather, on=['origin', 'hour', 'month', 'day'], how='left')

pressure_delay = weather_mg.groupby('pressure_group')['delay'].mean()
```


::: {.column width="60%"}

```{python}
#Wind Speed
colors = [ "lightgrey","lightgrey","lightgrey","yellowgreen","yellowgreen",]  
plt.figure(figsize=(6,4))
sns.barplot(x=wind_speed_delay.index, y=wind_speed_delay.values, palette=colors, ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Wind Speed (km/h or m/s)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Wind Speed')
plt.xticks(rotation=45)
plt.ylim(4,12)
plt.tight_layout()
plt.show()
```
<small> - 풍속이 빠를수록 항공기 운항이 지연되는 경향이 보인다.</small>

```{python}
#Precip
colors = ["yellowgreen","lightgrey"]  
plt.figure(figsize=(6,4))
sns.barplot(x=precip_delay.index, y=precip_delay.values, palette=colors, ci=None, width=0.4)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Precipitation (mm)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Precipitation (mm)')
plt.xticks(rotation=45)
plt.ylim(4,17)
plt.tight_layout()
plt.show()
```
<small> - 강수량이 있으면 항공기 운항이 지연되는 경향이 있다.</small>

```{python}
#Pressure
colors = [ "yellowgreen","lightgrey","lightgrey","lightgrey","yellowgreen"]  
plt.figure(figsize=(6,4))
sns.barplot(x=pressure_delay.index, y=pressure_delay.values, palette=colors, ci=None)
sns.light_palette("seagreen", as_cmap=True)
plt.xlabel('Pressure (hPa)')
plt.ylabel('Average Delay (minutes)')
plt.title('Average Delay by Pressure (hPa)')
plt.ylim(4,15)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```
<small> - 기압이 너무 낮거나 높으면 항공기 운항이 지연되는 경향이 보인다.
</small>
:::
<small> -(고기압은 일반적으로 맑고 안정적인 날씨를 제공하지만, 고기압 지역에서는 기온이 상승 가능성에 따라 고도가 높은 공항에서의 이륙 지연이 발생할 수 있다.)</small>
::::

# Conclusion {background-image=./static/images/airport.gif background-opacity=0.3}


## Conclusion 

#### 비행시간(airtime)과 좌석수(seats)
- 비행 시간이 길어질 수록 좌석 수가 많다.

#### 날씨(weather)와 지연시간(delay)

- 날씨가 악화될수록 항공기 운행이 지연될 가능성이 높아진다. 
특히, **저온, 높은 습도, 극단적인 이슬점, 짧은 가시거리**와 같은 조건이 결합될 경우 지연 확률이 더욱 증가할 것으로 예상된다.

- 추가로, **강한 풍속, 강수량, 극단적인 기압 변화**와 같은 조건이 결합될 경우에도 항공기 운항의 지연 확률이 올라갈 수밖에 없다.

# Thank You{background-image=./static/images/airport.gif background-opacity=0.3}