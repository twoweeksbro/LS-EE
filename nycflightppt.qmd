---
title: "New York Flight Data Analysis"
title-slide-attributes:
    data-background-image: ./static/images/airport.gif
    data-background-size: cover
    data-background-opacity: "0.8"
subtitle: "sub title"
author: "TEAM EE"
format: 
    revealjs:
        logo: ./static/images/lsstats-removebg.png
        theme: default
        reference-location: document
        footer: "LS Big Data School EE"
        css: ./static/css/statple.css

--- 


# about TEAM

박수현 이주형 오윤지 조익현

# NYC flights data 를 알아보자!



## nycflights13 - flights, planes
:::: {.columns}

::: {.column width="50%"}
`flights.info()`
```{python}
import numpy as np
import pandas as pd 
from nycflights13 import flights, planes
import matplotlib.pyplot as plt
flights.info()
```

:::

::: {.column width="50%"}
`planes.info()`
```{python}
planes.info()
```

:::


::::


## 우리의 주제
#### flights(airtime) 칼럼과 planes(seats) 칼럼은 무슨 관계일까?
#### delay(arr_delay, dep_delay)는 어떨 때 많이 생길까?
##### 비행기 제조년도 별 지연시간 확인.
##### month 와 delay 확인.


## 데이터 확인 {.scrollable}
### 지연시간에 이상치가 있다!
:::: {.columns}

::: {.column width="50%"}
```{python}
## 'dep_delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(flights['dep_delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("dep_delay")
plt.ylabel("Frequency")
plt.show()


## 'arr_delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(flights['arr_delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("arr_delay")
plt.ylabel("Frequency")
plt.show()

```

:::

::: {.column width="50%"}



<br>

| Statistic | Value         |
|-----------|-------------- |
| count     | 327346.000000 |
| mean      | 6.895377      |
| std       | 44.633292     |
| min       | -86.000000    |
| 25%       | -17.000000    |
| 50%       | -5.000000     |
| 75%       | 14.000000     |
| max       | 1272.000000   |
| Name: arr_delay |
:::


::::

## 전처리

planes와 flights 데이터를 left join 
```{python}
# 최종 전처리 시작.

flights_df = flights.copy()
planes_df = planes.copy()


# 전처리 함수
def PreProcessing(df, columns):
    """
    여러 개의 컬럼에 대해 IQR 방식을 사용하여 이상치를 제거하는 함수

    Parameters:
    df (pd.DataFrame): 데이터프레임
    columns (list): 이상치를 제거할 컬럼 리스트

    Returns:
    pd.DataFrame: 이상치가 제거된 데이터프레임
    """
    f_df = df.copy()  # 원본 데이터프레임 유지

    for column in columns:
        desc = f_df[column].describe()
        q1 = desc["25%"]
        q3 = desc["75%"]
        iqr = q3 - q1
        lower_boundary = q1 - (iqr * 1.5)
        upper_boundary = q3 + (iqr * 1.5)

        # 이상치 제거 적용
        f_df = f_df[(f_df[column] >= lower_boundary) & (f_df[column] <= upper_boundary)]

    return f_df


# 필요 없는 칼럼 제거
flights_df = flights_df.drop(columns=["year"])
planes_df = planes_df.drop(columns=["speed"])

# 결측치 처리
flights_df.isna().sum()
planes_df.isna().sum()

flights_df = flights_df.dropna(
    subset=["dep_time", "dep_delay", "arr_time", "arr_delay", "tailnum", "air_time"]
)
planes_df = planes_df.dropna()


# merge: planes_df와 flights_df를 tailnum으로 left join
merged_df = pd.merge(planes_df, flights_df, on="tailnum", how="left")


# 지연시간에 대해 전처리 함수 적용
merged_df_f = PreProcessing(merged_df, ["arr_delay", "dep_delay"])


# 파생 변수 생성

## delay 합.
merged_df_f["delay"] = merged_df_f["arr_delay"] + merged_df_f["dep_delay"]


```

## 전처리 후 지연시간(delay) 히스토그램 {.scrollable}

```{python}
## 'dep_delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(merged_df_f['dep_delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("dep_delay")
plt.ylabel("Frequency")
plt.show()


## 'arr_delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(merged_df_f['arr_delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("arr_delay")
plt.ylabel("Frequency")
plt.show()

## 'delay' 히스토그램
plt.figure(figsize=(6,4))       
plt.hist(merged_df_f['delay'], 
         bins=20, 
         edgecolor='black', 
         alpha=0.7) 
plt.xlabel("delay")
plt.ylabel("Frequency")
plt.show()


```



## month, day, hour 변수와 delay 간 시각화 {.scrollable}

```{python}
import seaborn as sns

# (df, 그룹화할 칼럼 리스트, 타겟 칼럼 문자열)
def visualization_df(df, group_cols, target):
    for col in group_cols:
        # grouped_df = df.groupby(cat_col)['delay'].mean()  # 그룹별 평균 계산

        # 시각화
        plt.figure(figsize=(9, 5))
        
        sns.barplot(x=col, y=target, data=df, estimator=np.mean,
                     palette="viridis", edgecolor="black")
        plt.xlabel(col)
        plt.ylabel(f"Average ")
        plt.title(f"Average by {col}")
        plt.xticks(rotation=90)
        plt.grid(axis="y", linestyle="--", alpha=0.7)
        plt.show()
```

```{python}
#| echo: false

# 월, 일, 시간 변수 와 delay Visualization
time_cols = ['month', 'day', 'hour']

visualization_df(merged_df_f, time_cols, 'delay' )
```

## 나머지 범주형 변수와 delay 간 시각화 {.scrollable}

```{python}
#| echo: false

# 숫자 아닌 다른 칼럼과 delay Visualization
# 숫자가 아닌 칼럼(범주형)
categorical_cols = merged_df_f.select_dtypes(exclude='number').columns 
categorical_cols = categorical_cols.delete([0,-1])

# visualization_df(merged_df_f, categorical_cols, 'delay' )
```


## 프린트 함수

```{python}
def print_grouped_data(df, group_cols, target):
    """
    특정한 범주형 컬럼 리스트(group_cols)에 대해 숫자형 칼럼(num_col)의 groupby 통계를 출력하는 함수.
    """
    for cat_col in group_cols:
        if cat_col not in df.columns:
            print(f"⚠️ Warning: '{cat_col}' 칼럼이 데이터프레임에 없음\n")
            continue  # 존재하지 않는 컬럼이면 건너뛰기
        
        grouped = df.groupby(cat_col)[target].agg(['mean', 'median', 'count', 'std'])
        print(f"\n📌 Grouped statistics by '{cat_col}':\n")
        print(grouped)
        print("-" * 50)
```

```{python}
print_grouped_data(merged_df_f, time_cols, 'delay')

```


## 전체 히트맵

```{python}
import seaborn as sns
corr_mat = merged_df.select_dtypes('number').corr()
plt.figure(figsize=(10,10))
sns.heatmap(corr_mat, annot=True,
            cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Heatmap of Feature Correlations")
plt.show()
```


# flights(air_time) 칼럼과 planes(seats) 칼럼은 무슨 관계일까?

## 비행시간과 좌석수 상관계수의 관계

### flights(air_time)-planes(seats)
- +0.54의 상관계수를 갖는다. => 비교적 강한 상관계수를 가진다.
- **seat(좌석수)**가 많은수록 **비행시간**이 길다.
- 큰 비행기 일 수록 비행 시간이 길다.

### flights(air_time)-flights(distance)
- +0.52의 상관계수를 갖는다. => 비교적 강한 상관계수를 가진다.
- **seat(좌석수)**가 많을수록 **목적지**까지의 거리가 길다.
- 큰 비행기일수록 목적지까지의 거리가 길다.

## air_time과 seats/distance 상관관계 시각화


## air_time-seats의 관계
비행시간(air_time)과 좌석 수(seats)의 관계 시각화 코드
```{python}
plt.figure(figsize=(10, 10))
sns.scatterplot(
    x=merged_df["air_time"],
    y=merged_df["seats"],
    hue=merged_df["model"],
    sizes=(30, 200),
    palette="Set2",
    alpha=0.5,
    data=merged_df,
)

sns.regplot(
    x=merged_df["air_time"],
    y=merged_df["seats"],
    scatter=False,
    color="red",
)

plt.xlabel("air_time")
plt.ylabel("seats")
plt.title("Scatter Plot")
plt.show()
```

- seats 변수는 대부분 100~200 사이에 집중
- 대부분의 항공기가 중형 크기로 설계되었음
- 좌석 수가 많을수록 비행 시간이 길어지는 경향이 관찰됨
- 속도가 높은 항공기는 비행 시간이 짧거나 특정 좌석 수에 집중되어 있음
- seats와 air_time: 상관계수 +0.52로, 좌석 수가 많을수록 비행 시간이 길어지는 경향이 있습니다.


## flights(distance)-flights(seats)의 관계
비행거리와 좌석 수의 관계 시각화 코드
```{python}
import seaborn as sns

plt.figure(figsize=(10, 10))
sns.scatterplot(
    x=merged_df["distance"],
    y=merged_df["seats"],
    sizes=(30, 200),
    palette="Set2",
    alpha=0.5,
    data=merged_df,
)

# Regression line (correlation line)
sns.regplot(
    x=merged_df["air_time"],
    y=merged_df["seats"],
    scatter=False,
    color="orange",
)

plt.xlabel("air_time")
plt.ylabel("seats")
plt.title("Scatter Plot")
plt.show()
```


## 둘 사이의 관계
- 비행기의 구조적인 측면
멀리 가려면 연료가 많이 필요하다. 연료통이 큰 비행기가 필요하다. 큰 비행기는 좌석수가 많다.

- 규모의 경제 측면
같은 돈을 내더라도 사람 수가 많으면 멀리갈 수 있다. 



# 지연시간(delay)과 관계가 있는 칼럼은 무엇인가?

## 비행기 제조년도와 지연시간 관계 

```{python}

```

## 날씨와 지연시간 관계

```{python}

```



# 최종 결론

## Conclusion

- airtime이 길어질 수록 시트 수가 많다. 즉 이동한다.

